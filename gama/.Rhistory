xlab = "First component",
ylab = "Second component",
col = c("deeppink", "blue")[crabs[, 2]],
pch = c(1, 2)[crabs[, 1]])
legend(0.03, 0.025,
c("Male", "Female"),
col = c("blue", "deeppink"),
cex = 0.8,
lwd = 1, lty = 1)
legend(0.03, 0.015,
c("Blue species", "Orange species"),
cex = 0.8,
pch = c(1,2))
par(mar=c(5, 4, 4, 2) + 0.1)
library(MASS)
install.package("smacof")
install.packages("smacof")
library("smacof")
data("ekman")
install.packages("smacof")
library("smacof")
install.packages("acepack")
library("smacof", dependencies= TRUE)
library("smacof")
install.packages("htmlTable")
library("smacof")
install.packages("slam")
library("smacof")
data("ekman")
ekman.d <- sim2diss(ekman, method = 1)
res.basic <- smacofSym(ekman.d, metric = FALSE)
res.basic <- smacofSym(ekman.d)
plot(res.basic, main = "Configurations Basic SMACOF", asp = 1)
res.sphere <- smacofSphere.primal(ekman.d, metric = FALSE)
res.sphere <- smacofSphere.primal(ekman.d)
library("smacof")
data("ekman")
ekman.d <- sim2diss(ekman, method = 1)
res.basic <- smacofSym(ekman.d, metric = FALSE)
ekman.mds.wld <- res.basic$confdiss[cumsum(c(1, 13:2))]
ekmanLuv <- convertColor(ekmanWL[, -1], "XYZ", "Luv")
Luv.dist <- dist(ekmanLuv)
Luv.wld <- Luv.dist[cumsum(c(1, 13:2))]
ekmanLuv <- convertColor(ekmanWL[, -1], "XYZ", "Luv")
wl <- c(434, 445, 465, 472, 490, 504, 537, 555, 584, 600, 610, 628, 651, 674)
CIE31 <- read.table("http://cvision.ucsd.edu/database/data/cmfs/ciexyz31_1.txt", header = FALSE, sep = ",", colClasses = rep("numeric", 4), nrows = 471)
names(CIE31) <- c("WL", "xbar", "ybar", "zbar")
ekmanWL <- subset(CIE31, WL %in% wl)
ekmanWL[, -1] <- ekmanWL[, -1]/ekmanWL[, "ybar"]
library("smacof")
data("ekman")
ekman.d <- sim2diss(ekman, method = 1)
res.basic <- smacofSym(ekman.d, metric = FALSE)
###################################################
res.sphere <- smacofSphere.primal(ekman.d, metric = FALSE)
###################################################
plot(res.basic, main = "Configurations Basic SMACOF", asp = 1)
plot(res.sphere, main = "Configurations Sphere SMACOF", asp = 1)
###################################################
wl <- c(434, 445, 465, 472, 490, 504, 537, 555, 584, 600, 610, 628, 651, 674)
CIE31 <- read.table("http://cvision.ucsd.edu/database/data/cmfs/ciexyz31_1.txt", header = FALSE, sep = ",", colClasses = rep("numeric", 4), nrows = 471)
names(CIE31) <- c("WL", "xbar", "ybar", "zbar")
ekmanWL <- subset(CIE31, WL %in% wl)
ekmanWL[, -1] <- ekmanWL[, -1]/ekmanWL[, "ybar"]
###################################################
ekman.mds.wld <- res.basic$confdiss[cumsum(c(1, 13:2))]
ekmanLuv <- convertColor(ekmanWL[, -1], "XYZ", "Luv")
Luv.dist <- dist(ekmanLuv)
Luv.wld <- Luv.dist[cumsum(c(1, 13:2))]
library("dtwclust")
news(package = "dtwclust")
data("uciCT")
require("TSclust")
require("TSclust")
install.packages("TSclust")
proxy::pr_DB$set_entry(FUN = diss.ACF, names = c("ACFD"), loop = TRUE, type = "metric", distance = TRUE, description = "Autocorrelation-based distance")
require("TSclust")
proxy::pr_DB$set_entry(FUN = diss.ACF, names = c("ACFD"), loop = TRUE, type = "metric", distance = TRUE, description = "Autocorrelation-based distance")
library("dtwclust")
data("uciCT")
require("TSclust")
library("dtwclust")
data("uciCT")
require("TSclust")
install.packages("TSclust", dependencies = TRUE)
require("TSclust")
install.packages("crosstalk")
proxy::pr_DB$set_entry(FUN = diss.ACF, names = c("ACFD"), loop = TRUE, type = "metric", distance = TRUE, description = "Autocorrelation-based distance")
require("TSclust")
install.packages("TSdist")
CharTraj
plot(CharTraj$A.V1)
plot(CharTraj$A.V1, type = "l")
plot(CharTraj$A.V2, type = "l")
require("TSdist")
require("TSclust")
library(GA)
install.packages("GA")
library(GA)
f <- function(x)  (x^2+x)*cos(x)
min <- -10; max <- 10
curve(f, min, max, n = 1000)
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
summary(GA)
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
citation("GA")
source('~/Desktop/ga/ga.R')
# definição da função
f <- function(x)  (x^2)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^2)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^2)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^2)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^2)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^2)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^2)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^2)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^2)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^2)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^2)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
source('~/Desktop/ga/ga.R')
source('~/Desktop/ga/ga.R')
source('~/Desktop/ga/ga.R')
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^3)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^3)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^3)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^3)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^3)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^3)
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
# https://cran.r-project.org/web/packages/GA/vignettes/GA.html
# na primeira execução, é necessário instalar o pacote
# install.packages("GA")
# inclusão do pacote
library(GA)
# definição da função
f <- function(x)  (x^3)*cos(x)^2*sinh(x)^3
# estabelece limites max e min para o espaço de busca
min <- -10; max <- 10
# plota a curva
curve(f, min, max, n = 1000)
# executa a busca
GA <- ga(type = "real-valued", fitness = f, min = min, max = max, monitor = FALSE)
# imprime resultados
summary(GA)
# adiciona o melhor valor na curva anteriormente plotada
points(GA@solution, GA@fitnessValue, col = 2, pch = 19)
lybrary("GA")
library("GA")
library("GA")
library("GA")
# 1) one-dimensional function
f <- function(x)  abs(x)+cos(x)
curve(f, -20, 20)
fitness <- function(x) -f(x)
GA <- ga(type = "real-valued", fitness = fitness, lower = -20, upper = 20)
summary(GA)
plot(GA)
curve(f, -20, 20)
abline(v = GA@solution, lty = 3)
library("GA")
# 1) one-dimensional function
f <- function(x)  abs(x)+cos(x)
curve(f, -20, 20)
fitness <- function(x) -f(x)
GA <- ga(type = "real-valued", fitness = fitness, lower = -20, upper = 20)
summary(GA)
plot(GA)
curve(f, -20, 20)
abline(v = GA@solution, lty = 3)
library("GA")
# 1) one-dimensional function
f <- function(x)  abs(x)+cos(x)
curve(f, -20, 20)
fitness <- function(x) -f(x)
GA <- ga(type = "real-valued", fitness = fitness, lower = -20, upper = 20)
summary(GA)
plot(GA)
curve(f, -20, 20)
abline(v = GA@solution, lty = 3)
library("GA")
# 1) one-dimensional function
f <- function(x)  abs(x)+cos(x)
curve(f, -20, 20)
fitness <- function(x) -f(x)
GA <- ga(type = "real-valued", fitness = fitness, lower = -20, upper = 20)
summary(GA)
plot(GA)
curve(f, -20, 20)
abline(v = GA@solution, lty = 3)
curve(f, -10, 10)
# write your own tracing function
monitor <- function(obj)
{
curve(f, -10, 10, main = paste("iteration =", obj@iter))
points(obj@population, obj@fitness, pch = 20, col = 2)
rug(obj@population, col = 2)
Sys.sleep(0.2)
}
GA <- ga(type = "real-valued", fitness = f, lower = -10, upper = 10, monitor = monitor)
source('~/Dropbox/Academico/Doutorado/2018.1/optimization/ga-test.r')
library("GA")
# 1) one-dimensional function
f <- function(x)  abs(x)+cos(x)
curve(f, -20, 20)
fitness <- function(x) -f(x)
GA <- ga(type = "real-valued", fitness = fitness, lower = -20, upper = 20)
# 1) one-dimensional function
f <- function(x)  abs(x)+cos(x)
curve(f, -20, 20)
fitness <- function(x) -f(x)
GA <- ga(type = "real-valued", fitness = fitness, lower = -20, upper = 20)
GA <- ga(type = "real-valued", fitness = fitness, lower = -20.0, upper = 20.0)
GA <- ga(type = "real-valued", fitness = fitness, min = -20.0, max = 20.0)
summary(GA)
shuffle(20)
library(permute)
vec <- c(3,4,5)
vec
allPerms(vec)
vec1 <- check(1:100)
vec2 <- check(1:100, how())
vec1
shuffle(5)
shuffle(5)
shuffle(5)
shuffle(5)
shuffle(5)
shuffle(n)
shuffle(200)
plts <- gl(4, 10) ## 4 Plots of 10 samples each
plts
blks <- gl(2, 20) ## 2 Blocks of 20 samples each
blks
h1 <- how(within = Within(type = "series", mirror = TRUE),
plots = Plots(strata = plts, type = "series"),
blocks = blks)
update(h1, blocks = NULL)
plots2 <- update(getPlots(h1), type = "none")
update(h1, plots = plots2)
sample(1:5. 1309, replace=T)
sample(1:5, 1309, replace=T)
sample(1:5, 1309, replace=T, prob(0.25, 0.5, 0.75))
sample(1:5, 1309, replace=T, prob = c(0.25, 0.5, 0.75))
source('~/Dropbox/Academico/Doutorado/CompBioInspirada/optimization/eniac/gama/ga-final-search.r')
setwd("~/Dropbox/Academico/Doutorado/CompBioInspirada/optimization/eniac/ga/")
library(cluster)
silhouette()
library(GA)
citation("GA")
ptions(citation.bibtex.max=999)
options(citation.bibtex.max=999)
citation("GA")
citation("dbscan")
citation("Rfast")
source('~/Dropbox/Academico/Doutorado/CompBioInspirada/optimization/gama/git/loadSolutions.R')
source('~/Dropbox/Academico/Doutorado/CompBioInspirada/optimization/gama/git/gama/gama.r')
this.dir
